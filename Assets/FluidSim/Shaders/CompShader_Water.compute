#pragma kernel reset
#pragma kernel computeFlux
#pragma kernel applySlipPass
#pragma kernel computeFlow
#pragma kernel computeWaterHeight
#pragma kernel computeWaterVelocity
#pragma kernel computeDiffusedWaterVelocity

Texture2D<float2> worldDataMap; // r = heightmap, g = soil holding capacity (affects absorption rate (absorptivity), evaporation rate, flow rate, and max holding capacity)

// TODO: If you need to optimize this a bit (memory or performance-wise), you can isolate multiple rendertextures to a single one (such as water height, soil saturation, and water velocity into a single float4 rendertexture. Also you can combine the heightmap with the soil data map into a float2 rendertexture).

RWTexture2D<float4> result; // TODO: temp!
RWTexture2D<float> waterMap;
RWTexture2D<float> newWaterMap;
RWTexture2D<float> saturationMap;
RWTexture2D<float> newSaturationMap;
RWTexture2D<float4> flowMap;    // each float in the float4 is a direction of flow (up, down, left, right)
RWTexture2D<float4> newFlowMap; // each float in the float4 is a direction of flow (up, down, left, right)
RWTexture2D<float2> velocityMap;
RWTexture2D<float2> newVelocityMap;
RWTexture2D<float> soilUseMap; // Soil use
RWTexture2D<float> newSoilUseMap; // Soil use

// Variables
float size;
float externalSize; // size of use map, etc.

float waterDensity;
float evaporationConstant;
float soilEvaporationConstant;
float soilDiffusionConstant;

float soilAbsorptionMultiplier;
float soilUseMultiplier;
float soilReleaseMultiplier;
float soilReleaseThreshold;
float soilReleaseSurfaceThreshold;
float heightmapMultiplier;

float gravityAcceleration;
float pipeLength;
float pipeArea; // should be the pipe length squared
float epsilon;
float diffuseAlpha;
float flowDamping;

float _deltaTime;

// Input
float2 inputPosition;
float inputRadius;
float inputAmount;

// Toggles
bool soilAbsorption;
bool soilUse;
bool soilEvaporation;
bool soilRelease;
bool surfaceFlow;
bool soilFlow;

// Total height of a cell (height from heightmap + water height)
float totalHeight(int2 pos)
{
    float4 height = worldDataMap[pos].r;
    return ((height.x + height.y + height.z + height.w) * heightmapMultiplier) + waterMap[pos];
}

// Returns the calculated flow
float flowToNeighbor(float flow, float heightDifference)
{
    return max(0.0, flow + _deltaTime * pipeArea * ((waterDensity * gravityAcceleration * heightDifference) / (waterDensity * pipeLength)));
}

// Gaussian blur function (float2)
float gaussFactor(float2 diff, float radius)
{
    return exp(-(diff.x * diff.x + diff.y * diff.y) / radius);
}

// Gaussian blur function (float)
float gauss(float x, float radius)
{
    return exp(-(x * x) / radius);
}

// Reset the textures
[numthreads(8, 8, 1)] void reset(uint3 id : SV_DispatchThreadid)
{
    waterMap[id.xy] = 0;
    newWaterMap[id.xy] = 0;
    saturationMap[id.xy] = 0;
    newSaturationMap[id.xy] = 0;
    flowMap[id.xy] = float4(0, 0, 0, 0);
    newFlowMap[id.xy] = float4(0, 0, 0, 0);
    velocityMap[id.xy] = float2(0, 0);
    newVelocityMap[id.xy] = float2(0, 0);
}

// Handle flux
[numthreads(8, 8, 1)] void computeFlux(uint3 id : SV_DispatchThreadid)
{
    float2 pos = id.xy / size;

    // float2 diff = pos - inputPosition;
    // float waterAmount = (diff.x * diff.x + diff.y * diff.y) < inputRadius * inputRadius ? inputAmount : 0;

    float newSurfaceWater = waterMap[id.xy] + gaussFactor(inputPosition - pos, inputRadius * inputRadius) * inputAmount;
    float soilSaturation = saturationMap[id.xy];
    float newSoilSaturation = soilSaturation;

    // Surface evaporation
    if (evaporationConstant > 0) {
        newSurfaceWater = max(newSurfaceWater - evaporationConstant, 0.0);
    }


    float soilData = worldDataMap[id.xy].g;
    
    // Soil absorption
    if (soilAbsorption){
        // Calculate the water this cell will absorb from the surface
        // This takes into account the soil holding capacity, the current saturation, and the surface water, along with the strength of the absorption
        float absorption = min(newSurfaceWater, (soilData - soilSaturation) * soilAbsorptionMultiplier);

        // Update the saturation and surface water
        newSoilSaturation = soilSaturation + absorption;
        newSurfaceWater -= absorption;
    }

    // Soil use
    if (soilUse) {
        // Scale pos to external texture size
        int2 externalPos = int2(pos * externalSize);

        float externalUnit = (size / externalSize); // basically how many soil cells there are in a single external cell

        // Get how much water is being used in this cell
        float use = (soilUseMap[externalPos] * externalUnit) * soilUseMultiplier; // TODO: * (1 - soilData);

        // Make sure we don't use more water than there is in this cell
        use = min(use, newSoilSaturation);

        // Subtract that used water from the soil
        newSoilSaturation -= use;

        // Remove the demand from the new soil map
        newSoilUseMap[externalPos] -= use / externalUnit;
    }

    // Soil evaporation
    // Make sure there is no surface water above this cell
    if (soilEvaporation && newSurfaceWater == 0) {
        // Not simply subtracting. It will approach zero bc we don't want soil to be PERFECTLY dry since that should never happen in the biome we're simulating. Even in a crazy drought it will never be 100% dry.
        newSoilSaturation = newSoilSaturation * (1 - soilEvaporationConstant); // TODO: ((1 - soilEvaporationConstant) * (1 - soilData));
    }

    // Soil release (only if above the release threshold)
    if (soilRelease && newSoilSaturation > soilReleaseThreshold && newSurfaceWater < soilReleaseSurfaceThreshold) {
        // Determine how much water to release back into the surface water
        // Release less if there is more than a little bit of surface water above us
        float release = newSoilSaturation * (1 - newSurfaceWater / soilReleaseSurfaceThreshold) * soilReleaseMultiplier; // TODO: * (1 - soilData);

        // Update the surface water and soil saturation
        newSurfaceWater += release;
        newSoilSaturation -= release;
    }

    newSaturationMap[id.xy] = newSoilSaturation;
    newWaterMap[id.xy] = newSurfaceWater;
}

// Apply slip pass to prevent issues at the borders
[numthreads(8, 8, 1)] void applySlipPass(uint3 id : SV_DispatchThreadid)
{
    // Check if on border
    if (id.x == 0)
    { // left border
        newWaterMap[id.xy] = waterMap[id.xy + int2(1, 0)];
        newSaturationMap[id.xy] = saturationMap[id.xy + int2(1, 0)];
    }
    else if (id.y == 0)
    { // bottom border
        newWaterMap[id.xy] = waterMap[id.xy + int2(0, 1)];
        newSaturationMap[id.xy] = saturationMap[id.xy + int2(0, 1)];
    }
    else if (int(id.x) == size - 1)
    { // right border
        newWaterMap[id.xy] = waterMap[id.xy + int2(-1, 0)];
        newSaturationMap[id.xy] = saturationMap[id.xy + int2(-1, 0)];
    }
    else if (int(id.y) == size - 1)
    { // top border
        newWaterMap[id.xy] = waterMap[id.xy + int2(0, -1)];
        newSaturationMap[id.xy] = saturationMap[id.xy + int2(0, -1)];
    }
}

// Compute the Flow
[numthreads(8, 8, 1)] void computeFlow(uint3 id : SV_DispatchThreadID)
{
    float2 pos = id.xy;
    
    float height = totalHeight(pos);
    float heightDiffUp = height - totalHeight(pos + float2(0, 1));
    float heightDiffDown = height - totalHeight(pos + float2(0, -1));
    float heightDiffLeft = height - totalHeight(pos + float2(-1, 0));
    float heightDiffRight = height - totalHeight(pos + float2(1, 0));

    // Height differences between this cell and the neighbor cells
    if (surfaceFlow) {
        // Calculate flow from this cell into each neighbor cell
        float4 oldFlow = flowMap[pos] * flowDamping;
        float flowUp = flowToNeighbor(oldFlow.x, heightDiffUp);
        float flowDown = flowToNeighbor(oldFlow.y, heightDiffDown);
        float flowLeft = flowToNeighbor(oldFlow.z, heightDiffLeft);
        float flowRight = flowToNeighbor(oldFlow.w, heightDiffRight);

        // Calculate the output volume
        float outputVolume = _deltaTime * (flowUp + flowDown + flowLeft + flowRight);

        // Scale down the final flow if the output volume is larger than the amount of water in this cell
        float comparator = (pipeLength * pipeLength) * waterMap[pos];
        if (outputVolume <= comparator)
        {
            newFlowMap[pos] = float4(flowUp, flowDown, flowLeft, flowRight);
        }
        else
        {
            newFlowMap[pos] = float4(flowUp, flowDown, flowLeft, flowRight) * (comparator / outputVolume);
        }
    }

    // SOIL: Diffuse the soil saturation
    if (soilFlow) {
        // Get neighbor saturation, but only if the neighbor is above this cell
        float saturation = saturationMap[pos];
        float satUp = (heightDiffUp < soilDiffusionConstant) ? saturationMap[pos + float2(0, 1)] : saturation;
        float satDown = (heightDiffDown < soilDiffusionConstant) ? saturationMap[pos + float2(0, -1)] : saturation;
        float satLeft = (heightDiffLeft < soilDiffusionConstant) ? saturationMap[pos + float2(-1, 0)] : saturation;
        float satRight = (heightDiffRight < soilDiffusionConstant) ? saturationMap[pos + float2(1, 0)] : saturation;
        
        // Calculate the new saturation with a simple gaussian blur
        float newSaturation = (satUp + satDown + satLeft + satRight + 4 * saturation) / 8;

        // Set the new saturation
        newSaturationMap[pos] = newSaturation;
    }
}

// Compute the water height
[numthreads(8, 8, 1)] void computeWaterHeight(uint3 id : SV_DispatchThreadID)
{
    int2 pos = id.xy;

    // Get the flow values of current cell and of neighbor cells
    float4 flow = flowMap[pos];
    float4 neighborFlowUp = flowMap[pos + int2(0, 1)];
    float4 neighborFlowDown = flowMap[pos + int2(0, -1)];
    float4 neighborFlowLeft = flowMap[pos + int2(-1, 0)];
    float4 neighborFlowRight = flowMap[pos + int2(1, 0)];

    // Calculate the flow into the current cell (use the directions of flow from the neighbors)
    float flowIntoCell = neighborFlowUp.y + neighborFlowDown.x + neighborFlowLeft.w + neighborFlowRight.z;

    // Calculate the flow out of the current cell
    float flowOutOfCell = flow.x + flow.y + flow.z + flow.w;

    // Calculate volume change for this cell
    float deltaVolume = flowIntoCell - flowOutOfCell;

    // Calculate new water height
    float newHeight = waterMap[pos] + ((_deltaTime * deltaVolume) / (pipeLength * pipeLength));
    newWaterMap[pos] = newHeight;

    // Result color
    result[pos] = float4(worldDataMap[pos].r, (worldDataMap[pos].r + newHeight) / 2, (worldDataMap[pos].r + saturationMap[pos]) / 2, 1);
}

// Compute the water velocity
[numthreads(8, 8, 1)] void computeWaterVelocity(uint3 id : SV_DispatchThreadID)
{
    int2 pos = id.xy;

    // Get the flow of the current cell and of the neighboring cells
    float4 flow = flowMap[pos];
    float4 neighborFlowUp = flowMap[pos + int2(0, 1)];
    float4 neighborFlowDown = flowMap[pos + int2(0, -1)];
    float4 neighborFlowLeft = flowMap[pos + int2(-1, 0)];
    float4 neighborFlowRight = flowMap[pos + int2(1, 0)];

    // Calculate the amount of water flowing through is both directions (x is left and right and y is up and down)
    float2 averageFlow;
    averageFlow.x = (neighborFlowLeft.w - flow.w + flow.z - neighborFlowRight.z) * 0.5;
    averageFlow.y = (neighborFlowDown.x - flow.x + flow.y - neighborFlowUp.y) * 0.5;

    // Average water current water height and the height in the last step
    float averageWaterHeight = (newWaterMap[pos] + waterMap[pos]) * 0.5;

    // Calculate the velocity factor (I couldn't think of a better name for this...)
    float velocityFactor = pipeLength * averageWaterHeight;

    // Calculate the velocity of the water flowing through this cell
    // Round the velocity to zero if the velocity factor is very close to zero
    velocityMap[pos] = (velocityFactor > epsilon) ? averageFlow / (pipeLength * averageWaterHeight) : float2(0, 0);
}

// Compute the diffused water velocity
[numthreads(8, 8, 1)] void computeDiffusedWaterVelocity(uint3 id : SV_DispatchThreadID)
{
    int2 pos = id.xy;

    // Get the OLD velocity of the current cell and of the neighboring cells
    float2 velocity = velocityMap[pos];
    float2 neighborVelocityUp = velocityMap[pos + int2(0, 1)];
    float2 neighborVelocityDown = velocityMap[pos + int2(0, -1)];
    float2 neighborVelocityLeft = velocityMap[pos + int2(-1, 0)];
    float2 neighborVelocityRight = velocityMap[pos + int2(1, 0)];

    // Diffuse the current cell's velocity
    newVelocityMap[pos] = (neighborVelocityUp + neighborVelocityDown + neighborVelocityLeft + neighborVelocityRight + diffuseAlpha * velocity) / (4.0 + diffuseAlpha);
}